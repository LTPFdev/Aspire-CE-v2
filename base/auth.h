#pragma once

enum FUNCBYNAME
{
	GET_CPU_KEY = 0,
	GET_SEC_INFO,
	GET_SHA_FUNC,
	GET_SHA_START,
	HV_PEEK_BYTES,
	GET_SHA_UPDATE,
	GET_SHA_FINISH,
	GET_FILE_HASH,
};

enum RESPONSE_PACKET_TYPE
{
	BANNED_PACKET = 1,
	TOKEN_PACKET = 2,
	TIME_EXPIRED = 3,
	OUTDATED_PACKET = 4,
	AUTHED_PACKET = 5,
};

typedef struct
{
	unsigned int total[2];
	unsigned int state[5];
	unsigned char buffer[64];
}
sha1_context;

static unsigned char aspireColon[7] = {
	0x34, 0x96, 0xF5, 0xA5, 0xB4, 0x4F, 0x54
};

static unsigned char aspireColonKey[16] = {
	0x7A, 0xFE, 0x8F, 0xF0, 0x3C, 0xF7, 0x08, 0x27, 0x13, 0x8F, 0x42, 0xD0,
	0x61, 0x3C, 0xF3, 0x76
};

static unsigned char aspireXex[10] = {
	0x56, 0x2F, 0x69, 0x03, 0xB6, 0xCF, 0x51, 0xBC, 0xD1, 0x5B
};

static unsigned char aspireXexKey[16] = {
	0x58, 0x23, 0xD4, 0x4D, 0xFE, 0x83, 0xEA, 0x84, 0x87, 0x3C, 0x7A, 0xC8,
	0xCA, 0x60, 0x06, 0x35
};

static unsigned char dotrdata[6] = {
	0xB1, 0xE9, 0x20, 0x9A, 0xA9, 0xAB
};

static unsigned char dotrdataKey[16] = {
	0x6E, 0x4B, 0xEA, 0xFA, 0x6D, 0x42, 0x61, 0x31, 0x77, 0xF2, 0x8F, 0x15,
	0x41, 0xB4, 0xE6, 0x1E
};


static unsigned char aspireXexPath[19] = {
	0xBC, 0x3A, 0xAA, 0xF3, 0xC9, 0x49, 0xF8, 0x0F, 0x46, 0x2F, 0x58, 0x35,
	0xC7, 0x34, 0x41, 0xC2, 0xFF, 0x2C, 0x33
};

static unsigned char aspireXexPathKey[16] = {
	0x6E, 0xDD, 0xCD, 0x18, 0x8A, 0x23, 0x66, 0x2E, 0x9D, 0x46, 0xAD, 0xA8,
	0x95, 0x0F, 0x19, 0xFF
};

static unsigned char youveRedeemed[15] = {
	0xC6, 0xBB, 0x11, 0x5D, 0xA2, 0x79, 0x4A, 0x8B, 0x2F, 0xE8, 0x0A, 0xE5,
	0x7D, 0xF5, 0xA8
};

static unsigned char youveRedeemedKey[16] = {
	0xA1, 0x27, 0x99, 0xC7, 0x18, 0xF0, 0xC5, 0xB9, 0x83, 0xE6, 0x4A, 0x69,
	0xEC, 0x59, 0xE5, 0x21
};

static unsigned char invalidToken[7] = {
	0x78, 0xE8, 0x08, 0xF1, 0x7F, 0xB6, 0x6A
};

static unsigned char invalidTokenKey[16] = {
	0x9E, 0x4B, 0xB4, 0xD5, 0xCC, 0x18, 0x12, 0xEB, 0x63, 0x0B, 0x1C, 0xDA,
	0x4D, 0xF1, 0xAD, 0x20
};

static unsigned char alreadyToken[7] = {
	0xA9, 0xE4, 0x92, 0xF9, 0x81, 0x94, 0x54
};

static unsigned char alreadyTokenKey[16] = {
	0x33, 0xAD, 0xEA, 0xB9, 0xD6, 0xFB, 0xF6, 0x47, 0x53, 0xA1, 0x3A, 0xB7,
	0x2C, 0x89, 0xED, 0x39
};

static unsigned char connectionFailed[29] = {
	0x8D, 0xBD, 0x76, 0x70, 0xCA, 0x63, 0x6E, 0x15, 0xC9, 0x87, 0x3D, 0x1E,
	0x79, 0x8D, 0x20, 0xE5, 0x76, 0x84, 0x4C, 0x2D, 0x30, 0xB0, 0xB7, 0xCD,
	0xA5, 0x82, 0xBD, 0xBE, 0x7B
};

static unsigned char connectionFailedKey[16] = {
	0x47, 0x85, 0x4D, 0x2B, 0xA2, 0xCF, 0x4F, 0xBB, 0xF4, 0x72, 0x3B, 0xAC,
	0xB8, 0x5C, 0x0B, 0x51
};

static unsigned char errorContactSupport[34] = {
	0xB6, 0x30, 0xE3, 0xF3, 0x3D, 0x2B, 0xAA, 0x81, 0x78, 0x7B, 0xC3, 0x7D,
	0xF8, 0x98, 0x9F, 0x02, 0x35, 0xFE, 0xCE, 0x75, 0x09, 0x49, 0x1F, 0x24,
	0x97, 0xE9, 0xAA, 0x89, 0x8C, 0xB1, 0xCF, 0x80, 0x78, 0xEF
};

static unsigned char errorContactSupportKey[16] = {
	0xB4, 0x01, 0xDB, 0xC3, 0x94, 0xA7, 0xE3, 0x1D, 0x71, 0x0C, 0xE8, 0x02,
	0xA6, 0x7A, 0xC2, 0x61
};

static unsigned char bootanimXex[12] = {
	0x4D, 0xFE, 0x8A, 0xFF, 0xE9, 0x42, 0x18, 0x5C, 0x2E, 0x3C, 0x55, 0xC6
};

static unsigned char bootanimKey[16] = {
	0xC6, 0x58, 0x1C, 0xF7, 0x86, 0x25, 0x49, 0x59, 0x52, 0x14, 0xAB, 0x3E,
	0xD4, 0x8D, 0x40, 0x24
};

struct cheatData
{
	char packetId; // 0x00
	char fileHash[0x14]; // 0x01
	char CPUKey[0x10]; // 0x15
	char textHash[0x14]; // 0x25
	char securityHash[0x14]; // 0x39
	char message[0x100]; // 0x4D
	int addresses[0x40]; // 0x150
	char padding[0xB3];
}; // Size = 0x250

extern int(*funcByName)(int num);
extern void(*getCpuKey)(char *outBuffer);
extern BOOL(*GetSectionInfo)(int baseAddr, CONST PCHAR SectionName, PDWORD Address, PDWORD Length);
extern void(*sha1)(void* inData, unsigned int lenght, unsigned char* outBuffer);
extern void(*sha1_starts)(sha1_context *ctx);
extern HRESULT(*HvPeekBytes)(__int64 Address, PVOID Buffer, DWORD Size);
extern void(*sha1_update)(sha1_context *ctx, unsigned char *input, unsigned int length);
extern void(*sha1_finish)(sha1_context *ctx, unsigned char digest[20]);
extern void(*getCheatHash)(char *outBuffer);

class auth
{
public:
	static void GenerateCPUKeyHash(DWORD AnnoyingIndex, BYTE* Result);
	static bool connect(int *outAddrs);
};

